# CM/ECF System API Endpoints with SQL Statements

## 1. User Management Service

- POST /api/users - Create a new user
  ```sql
  INSERT INTO users (username, password_hash, role_id)
  VALUES ($1, $2, $3)
  RETURNING id;
  ```

- GET /api/users/{userId} - Get user details
  ```sql
  SELECT id, username, role_id FROM users WHERE id = $1;
  ```

- PUT /api/users/{userId} - Update user information
  ```sql
  UPDATE users
  SET username = $2, role_id = $3
  WHERE id = $1;
  ```

- DELETE /api/users/{userId} - Delete a user
  ```sql
  DELETE FROM users WHERE id = $1;
  ```

- POST /api/users/login - User login
  ```sql
  SELECT id, role_id FROM users
  WHERE username = $1 AND password_hash = $2;
  ```

- POST /api/users/logout - User logout
  (This is typically handled by the application, not the database)

- PUT /api/users/{userId}/password - Change password
  ```sql
  UPDATE users
  SET password_hash = $2
  WHERE id = $1;
  ```

- GET /api/users/{userId}/permissions - Get user permissions
  ```sql
  SELECT p.name
  FROM permissions p
  JOIN role_permissions rp ON p.id = rp.permission_id
  JOIN users u ON u.role_id = rp.role_id
  WHERE u.id = $1;
  ```

## 2. Case Management Service

- POST /api/cases - Create a new case
  ```sql
  INSERT INTO cases (case_number, title, status, filed_date, court_id, judge_id)
  VALUES ($1, $2, $3, $4, $5, $6)
  RETURNING id;
  ```

- GET /api/cases/{caseId} - Get case details
  ```sql
  SELECT * FROM cases WHERE id = $1;
  ```

- PUT /api/cases/{caseId} - Update case information
  ```sql
  UPDATE cases
  SET title = $2, status = $3, court_id = $4, judge_id = $5
  WHERE id = $1;
  ```

- DELETE /api/cases/{caseId} - Delete a case (soft delete)
  ```sql
  UPDATE cases
  SET status = 'DELETED', deleted_at = CURRENT_TIMESTAMP
  WHERE id = $1;
  ```

- GET /api/cases - List cases (with filtering and pagination)
  ```sql
  SELECT * FROM cases
  WHERE status != 'DELETED'
  ORDER BY filed_date DESC
  LIMIT $1 OFFSET $2;
  ```

- PUT /api/cases/{caseId}/status - Update case status
  ```sql
  UPDATE cases
  SET status = $2
  WHERE id = $1;
  ```

- GET /api/cases/{caseId}/history - Get case history
  ```sql
  SELECT * FROM case_history
  WHERE case_id = $1
  ORDER BY change_date DESC;
  ```

- POST /api/cases/{caseId}/transfer - Transfer case to another court
  ```sql
  INSERT INTO case_transfers (case_id, from_court_id, to_court_id, transfer_date)
  VALUES ($1, $2, $3, CURRENT_TIMESTAMP);

  UPDATE cases
  SET court_id = $3
  WHERE id = $1;
  ```

## 3. Document Management Service

- POST /api/documents - Upload a new document
  ```sql
  INSERT INTO documents (case_id, title, file_path, filed_date)
  VALUES ($1, $2, $3, CURRENT_DATE)
  RETURNING id;
  ```

- GET /api/documents/{documentId} - Get document details
  ```sql
  SELECT * FROM documents WHERE id = $1;
  ```

- PUT /api/documents/{documentId} - Update document information
  ```sql
  UPDATE documents
  SET title = $2, file_path = $3
  WHERE id = $1;
  ```

- DELETE /api/documents/{documentId} - Delete a document
  ```sql
  DELETE FROM documents WHERE id = $1;
  ```

- GET /api/documents - List documents (with filtering and pagination)
  ```sql
  SELECT * FROM documents
  WHERE case_id = $1
  ORDER BY filed_date DESC
  LIMIT $2 OFFSET $3;
  ```

- GET /api/documents/{documentId}/download - Download a document
  ```sql
  SELECT file_path FROM documents WHERE id = $1;
  ```

- POST /api/documents/{documentId}/seal - Seal a document
  ```sql
  UPDATE documents
  SET is_sealed = TRUE
  WHERE id = $1;

  INSERT INTO document_seal_history (document_id, sealed_by, seal_date, reason)
  VALUES ($1, $2, CURRENT_TIMESTAMP, $3);
  ```

- POST /api/documents/{documentId}/unseal - Unseal a document
  ```sql
  UPDATE documents
  SET is_sealed = FALSE
  WHERE id = $1;

  UPDATE document_seal_history
  SET unsealed_by = $2, unseal_date = CURRENT_TIMESTAMP
  WHERE document_id = $1 AND unseal_date IS NULL;
  ```

- GET /api/documents/{documentId}/access-logs - Get document access logs
  ```sql
  SELECT * FROM document_access_logs
  WHERE document_id = $1
  ORDER BY access_time DESC;
  ```

## 4. Docket Management Service

- POST /api/dockets - Create a new docket entry
  ```sql
  INSERT INTO dockets (case_id, entry_number, entry_date, entry_text)
  VALUES ($1, $2, CURRENT_DATE, $3)
  RETURNING id;
  ```

- GET /api/dockets/{docketId} - Get docket entry details
  ```sql
  SELECT * FROM dockets WHERE id = $1;
  ```

- PUT /api/dockets/{docketId} - Update docket entry
  ```sql
  UPDATE dockets
  SET entry_text = $2
  WHERE id = $1;
  ```

- DELETE /api/dockets/{docketId} - Delete a docket entry
  ```sql
  DELETE FROM dockets WHERE id = $1;
  ```

- GET /api/cases/{caseId}/dockets - List docket entries for a case
  ```sql
  SELECT * FROM dockets
  WHERE case_id = $1
  ORDER BY entry_date DESC, entry_number DESC;
  ```

## 5. Party Management Service

- POST /api/parties - Add a new party
  ```sql
  INSERT INTO parties (name, type)
  VALUES ($1, $2)
  RETURNING id;
  ```

- GET /api/parties/{partyId} - Get party details
  ```sql
  SELECT * FROM parties WHERE id = $1;
  ```

- PUT /api/parties/{partyId} - Update party information
  ```sql
  UPDATE parties
  SET name = $2, type = $3
  WHERE id = $1;
  ```

- DELETE /api/parties/{partyId} - Remove a party
  ```sql
  DELETE FROM parties WHERE id = $1;
  ```

- GET /api/cases/{caseId}/parties - List parties for a case
  ```sql
  SELECT p.*
  FROM parties p
  JOIN case_parties cp ON p.id = cp.party_id
  WHERE cp.case_id = $1;
  ```

- POST /api/cases/{caseId}/parties - Add party to a case
  ```sql
  INSERT INTO case_parties (case_id, party_id, role)
  VALUES ($1, $2, $3);
  ```

## 6. Scheduling Service

- POST /api/hearings - Schedule a new hearing
  ```sql
  INSERT INTO hearings (case_id, hearing_date, location, description)
  VALUES ($1, $2, $3, $4)
  RETURNING id;
  ```

- GET /api/hearings/{hearingId} - Get hearing details
  ```sql
  SELECT * FROM hearings WHERE id = $1;
  ```

- PUT /api/hearings/{hearingId} - Update hearing information
  ```sql
  UPDATE hearings
  SET hearing_date = $2, location = $3, description = $4
  WHERE id = $1;
  ```

- DELETE /api/hearings/{hearingId} - Cancel a hearing
  ```sql
  DELETE FROM hearings WHERE id = $1;
  ```

- GET /api/cases/{caseId}/hearings - List hearings for a case
  ```sql
  SELECT * FROM hearings
  WHERE case_id = $1
  ORDER BY hearing_date DESC;
  ```

- GET /api/courts/{courtId}/calendar - Get court calendar
  ```sql
  SELECT h.*
  FROM hearings h
  JOIN cases c ON h.case_id = c.id
  WHERE c.court_id = $1 AND h.hearing_date >= CURRENT_DATE
  ORDER BY h.hearing_date;
  ```

## 7. Motion and Pleading Service

- POST /api/motions - File a new motion
  ```sql
  INSERT INTO motions (case_id, motion_type, filed_date, status)
  VALUES ($1, $2, CURRENT_DATE, 'PENDING')
  RETURNING id;
  ```

- GET /api/motions/{motionId} - Get motion details
  ```sql
  SELECT * FROM motions WHERE id = $1;
  ```

- PUT /api/motions/{motionId} - Update motion information
  ```sql
  UPDATE motions
  SET motion_type = $2, status = $3
  WHERE id = $1;
  ```

- DELETE /api/motions/{motionId} - Withdraw a motion
  ```sql
  UPDATE motions
  SET status = 'WITHDRAWN'
  WHERE id = $1;
  ```

- GET /api/cases/{caseId}/motions - List motions for a case
  ```sql
  SELECT * FROM motions
  WHERE case_id = $1
  ORDER BY filed_date DESC;
  ```

- POST /api/pleadings - File a new pleading
  ```sql
  INSERT INTO pleadings (case_id, pleading_type, filed_date, status)
  VALUES ($1, $2, CURRENT_DATE, 'FILED')
  RETURNING id;
  ```

- GET /api/pleadings/{pleadingId} - Get pleading details
  ```sql
  SELECT * FROM pleadings WHERE id = $1;
  ```

- GET /api/cases/{caseId}/pleadings - List pleadings for a case
  ```sql
  SELECT * FROM pleadings
  WHERE case_id = $1
  ORDER BY filed_date DESC;
  ```

## 8. Discovery Service

- POST /api/discovery - Create a new discovery request
  ```sql
  INSERT INTO discovery (case_id, request_type, request_date, status)
  VALUES ($1, $2, CURRENT_DATE, 'PENDING')
  RETURNING id;
  ```

- GET /api/discovery/{discoveryId} - Get discovery request details
  ```sql
  SELECT * FROM discovery WHERE id = $1;
  ```

- PUT /api/discovery/{discoveryId} - Update discovery request
  ```sql
  UPDATE discovery
  SET status = $2, response_date = $3
  WHERE id = $1;
  ```

- DELETE /api/discovery/{discoveryId} - Cancel discovery request
  ```sql
  UPDATE discovery
  SET status = 'CANCELLED'
  WHERE id = $1;
  ```

- GET /api/cases/{caseId}/discovery - List discovery requests for a case
  ```sql
  SELECT * FROM discovery
  WHERE case_id = $1
  ORDER BY request_date DESC;
  ```

## 9. Judgment and Appeal Service

- POST /api/judgments - Record a new judgment
  ```sql
  INSERT INTO judgments (case_id, judgment_date, description)
  VALUES ($1, CURRENT_DATE, $2)
  RETURNING id;
  ```

- GET /api/judgments/{judgmentId} - Get judgment details
  ```sql
  SELECT * FROM judgments WHERE id = $1;
  ```

- PUT /api/judgments/{judgmentId} - Update judgment information
  ```sql
  UPDATE judgments
  SET description = $2
  WHERE id = $1;
  ```

- GET /api/cases/{caseId}/judgments - List judgments for a case
  ```sql
  SELECT * FROM judgments
  WHERE case_id = $1
  ORDER BY judgment_date DESC;
  ```

- POST /api/appeals - File a new appeal
  ```sql
  INSERT INTO appeals (case_id, appeal_date, appellate_court)
  VALUES ($1, CURRENT_DATE, $2)
  RETURNING id;
  ```

- GET /api/appeals/{appealId} - Get appeal details
  ```sql
  SELECT * FROM appeals WHERE id = $1;
  ```

- PUT /api/appeals/{appealId} - Update appeal information
  ```sql
  UPDATE appeals
  SET appellate_court = $2, outcome = $3
  WHERE id = $1;
  ```

- GET /api/cases/{caseId}/appeals - List appeals for a case
  ```sql
  SELECT * FROM appeals
  WHERE case_id = $1
  ORDER BY appeal_date DESC;
  ```

## 10. Financial Management Service

- POST /api/payments - Record a new payment
  ```sql
  INSERT INTO fees_payments (case_id, amount, payment_date, payment_method)
  VALUES ($1, $2, CURRENT_DATE, $3)
  RETURNING id;
  ```

- GET /api/payments/{paymentId} - Get payment details
  ```sql
  SELECT * FROM fees_payments WHERE id = $1;
  ```

- PUT /api/payments/{paymentId} - Update payment information
  ```sql
  UPDATE fees_payments
  SET amount = $2, payment_method = $3
  WHERE id = $1;
  ```

- GET /api/cases/{caseId}/payments - List payments for a case
  ```sql
  SELECT * FROM fees_payments
  WHERE case_id = $1
  ORDER BY payment_date DESC;
  ```

- GET /api/cases/{caseId}/balance - Get current balance for a case
  ```sql
  SELECT SUM(amount) as balance
  FROM fees_payments
  WHERE case_id = $1;
  ```

## 11. Notification Service

- POST /api/notifications - Create a new notification
  ```sql
  INSERT INTO notifications (user_id, message, notification_date)
  VALUES ($1, $2, CURRENT_TIMESTAMP)
  RETURNING id;
  ```

- GET /api/notifications/{notificationId} - Get notification details
  ```sql
  SELECT * FROM notifications WHERE id = $1;
  ```

- PUT /api/notifications/{notificationId}/read - Mark notification as read
  ```sql
  UPDATE notifications
  SET is_read = TRUE
  WHERE id = $1;
  ```

- GET /api/users/{userId}/notifications - List notifications for a user
  ```sql
  SELECT * FROM notifications
  WHERE user_id = $1
  ORDER BY notification_date DESC;
  ```

## 12. Search Service

- GET /api/search/cases - Search cases
  ```sql
  SELECT * FROM cases
## 12. Search Service (continued)

- GET /api/search/cases - Search cases
  ```sql
  SELECT * FROM cases
  WHERE (title ILIKE $1 OR case_number ILIKE $1)
  AND status != 'DELETED'
  ORDER BY filed_date DESC
  LIMIT $2 OFFSET $3;
  ```

- GET /api/search/documents - Search documents
  ```sql
  SELECT d.* FROM documents d
  JOIN cases c ON d.case_id = c.id
  WHERE d.title ILIKE $1
  AND c.status != 'DELETED'
  ORDER BY d.filed_date DESC
  LIMIT $2 OFFSET $3;
  ```

- GET /api/search/parties - Search parties
  ```sql
  SELECT p.* FROM parties p
  JOIN case_parties cp ON p.id = cp.party_id
  JOIN cases c ON cp.case_id = c.id
  WHERE p.name ILIKE $1
  AND c.status != 'DELETED'
  ORDER BY p.name
  LIMIT $2 OFFSET $3;
  ```

## 13. Reporting Service

- GET /api/reports/case-status - Generate case status report
  ```sql
  SELECT status, COUNT(*) as count
  FROM cases
  WHERE filed_date BETWEEN $1 AND $2
  GROUP BY status;
  ```

- GET /api/reports/court-performance - Generate court performance report
  ```sql
  SELECT c.name as court_name,
         COUNT(case.id) as total_cases,
         AVG(EXTRACT(EPOCH FROM (case.closed_date - case.filed_date))/86400) as avg_days_to_close
  FROM courts c
  LEFT JOIN cases case ON c.id = case.court_id
  WHERE case.filed_date BETWEEN $1 AND $2
  GROUP BY c.id, c.name;
  ```

- GET /api/reports/financial - Generate financial report
  ```sql
  SELECT c.case_number,
         SUM(fp.amount) as total_fees,
         string_agg(DISTINCT fp.payment_method, ', ') as payment_methods
  FROM cases c
  JOIN fees_payments fp ON c.id = fp.case_id
  WHERE fp.payment_date BETWEEN $1 AND $2
  GROUP BY c.id, c.case_number;
  ```

## 14. Admin Service

- GET /api/admin/system-status - Get system status
  ```sql
  SELECT 'database' as component,
         CASE WHEN pg_is_in_recovery() THEN 'standby' ELSE 'primary' END as status,
         version() as version;
  ```

- POST /api/admin/backup - Initiate system backup
  (This would typically be handled by a separate backup system, not directly through SQL)

- POST /api/admin/restore - Initiate system restore
  (This would typically be handled by a separate restore system, not directly through SQL)

- GET /api/admin/audit-logs - Get system audit logs
  ```sql
  SELECT * FROM user_activity_logs
  WHERE created_at BETWEEN $1 AND $2
  ORDER BY created_at DESC
  LIMIT $3 OFFSET $4;
  ```

## 15. Chat Service

- POST /api/chat/rooms - Create a new chat room
  ```sql
  INSERT INTO chat_rooms (case_id, name)
  VALUES ($1, $2)
  RETURNING id;
  ```

- GET /api/chat/rooms/{roomId} - Get chat room details
  ```sql
  SELECT * FROM chat_rooms WHERE id = $1;
  ```

- POST /api/chat/rooms/{roomId}/messages - Send a message
  ```sql
  INSERT INTO messages (chat_room_id, user_id, content)
  VALUES ($1, $2, $3)
  RETURNING id;
  ```

- GET /api/chat/rooms/{roomId}/messages - Get messages in a chat room
  ```sql
  SELECT m.*, u.username
  FROM messages m
  JOIN users u ON m.user_id = u.id
  WHERE m.chat_room_id = $1
  ORDER BY m.sent_at
  LIMIT $2 OFFSET $3;
  ```

- PUT /api/chat/messages/{messageId}/react - React to a message
  ```sql
  INSERT INTO message_reactions (message_id, user_id, reaction)
  VALUES ($1, $2, $3)
  ON CONFLICT (message_id, user_id)
  DO UPDATE SET reaction = EXCLUDED.reaction;
  ```
